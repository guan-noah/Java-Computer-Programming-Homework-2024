//GrowthPatternExtraCredit.java
/* Noah Guan
 * 01-13-2025
 * Per. 6 Java w/ Mr. Yu
 * GrowthPatternExtraCredit.java
 * Program #37.1
 * Pseudocode: 

d&i fv height (in constructor) 
main 
	d&i new instance of class 
	use instance to call run method 
void growIt (program name, program description)
	print 3 lines 
	do 
		print welcome (header and intro) 
		call real meat of program method 
		for (int time = 0; time < height.length; time++)
    	{
    		height[time] = height[time] + 5 
				//don't do this. do it later when using it 
    		printSymbols(time)
    		printRate()
    	}
	    all heights 
	while (<call> userPlaying)
	print 3 lines

boolean userPlaying 
	declare userPlay, 
	declare userdecision to <call> input of would you like to run again, next 
	if userdecision = yes, userPlay = true. 
	else if userdecision = no, userPlay = false. 
	else user didn't input yes or no, prompt them to answer correctly, <call> userPlaying again 
	return userPlay 
String getInput (promptIn, get)
	new instance of Scanner called keyboard 
	print promptIn and format for answer
	if get = "line", get .nextLine()
	else if get = "word" or "next", return .next()
	else if get = "int", return .nextInt()
	else if get = "double", return .nextDouble()
	else, print (internal) error, return null 
String decideSymbols(time)
	//type of symbols = if one to the next is decreasing, same, or increasing
	d&i returnString to ""
	find out the type (using if)
	returnString = 
	for(int i = 0, i < howManySymbols, i++)
	{
	    returnString = returnString + type 
	}
	return returnString
printSymbols(time)
	System.out.printf(%5d + "t " + decideSymbols(time) + "\n", time);
printRate()
    print out ("The average rate of change is " + (lastItem - initialItem / (height.length - 1) ))

/* extra credit pseudocode 
int[] userHeight = call getUserInfo();
formatOutput
		char zeroChar = '|'; 
		if (decideSymbols(timeIn).charAt(0) = '-')
		{
			zeroChar = '-';
		}
		else if (decideSymbols(timeIn).charAt(0) = '+')
		{
			zeroChar = '+';
		}
		else 
			//nothing because (decideSymbols(timeIn).charAt(0) = 'o')
		System.out.printf("%-5s%6s%1s%s\n", ("t" + (timeIn-1)), before, zeroChar, after;
*/
/*OPTION 1: 
import java.util.ArrayList;
import java.util.List;
*/
/*
getUserInfo();
int[] getUserInfo()
		System.out.println("Now it's your turn. Please enter your heights " + 
			"in order from initial height to ending height.");
		int userNextHeight;
		*/
		
		/* OPTION 1: 
		List<int> userHeightList = new ArrayList<>();
		do
		{
			if (!(userNextWord.equalsIgnoreCase("quit")))
			{
				userHeightList.add(getInput("Please enter the next height of your plant.", "int"));
			}
		} while (userNextWord.equalsIgnoreCase("quit")); //acts as the else 
		list.toArray(userHeight);
		int[] userHeight = list.toArray(new userHeight[0]);
		*/
		
		/* OPTION 2: 
		int[] userHeight = int[Integer.parseInt(getInput("Please enter the total number " + 
			"of time periods you want to track", "int"))];
		for (int i = 0; i < userHeight.length; i++)
		{
			userHeight[i] = getInput("Please enter the next height of your plant.", "int"); 
		}
		
		//or userHeight int[] = new int[userHeightList.size()];
	    	// by https://stackoverflow.com/questions/9572795/convert-list-to-array-in-java
		*/
		
		/*
		return userHeight;
		
		
finish: 
2. gradeStats program 
3. upload to my experiments (noah utils) github 
 */
import java.util.Scanner;
public class GrowthPatternExtraCredit 
{
    private int[] height;
    public GrowthPatternExtraCredit()
    {
        height = new int[]{-1,	-3,	1,	2,	3,	4,	3,	4,	4,	6,	8,	6,	6,	7,	10};
    }
    public static void main(String args[]) 
    {
        GrowthPatternExtraCredit gpec = new GrowthPatternExtraCredit();
        gpec.growIt("GrowthPatternExtraCredit", "is a program to monitor the growth of a plant over time. ");
    }
    public void growIt(String programName, String programDescription)
    {
        System.out.println("\n\n\n");
        //declare variables outside of while loop 
        int[] height1 = height; 
            //declaring the first instance variable to field variable 
        int runNum = 0; 
            //we will increment this every time we run the main part of the program 
		do
        {
            System.out.println("\nWelcome to " + programName + 
                ". \nThis program " + programDescription);
                //header and intro section 
            runNum++; //for the number of times run 
            //call the real meat of the program method 
            int innerRunNum = 0; //(same logic)
            String toPrint = ""; //to change the 
            int[] heightArray = height1;
            do
            {
                innerRunNum++;
                
                if (innerRunNum == 1)
                {
                    toPrint = "\nExample: ";
                    heightArray = height1;
                }
                else 
                {
                    //user interactive stage starts 
                    if (innerRunNum == 2)
                    {
                        toPrint = "Now it's your turn.";
                        heightArray = getUserArray();
                    }
                    else //innerRunNum > 2
                    {
                        toPrint = ""; //don't have to prompt them by now, they should know 
						heightArray = getUserArray();
					}
                }
                
                System.out.println(toPrint);
                for (int time = 1; time < heightArray.length; time++)
            	{
            		formatOutput(heightArray, time);
						//instead of printSymbols(heightArray, time);
            	}
            	printRate(heightArray);
            }while(getInput("Would you like to run again? (if you format your answer incorrectly, the program will terminate.) [Y/N]", "next").equalsIgnoreCase("Y"));
                //checks if the user would like to run again 
            runNum++;
        	System.out.println();//separate one from the next 
        } while(userPlaying());
        System.out.println("Thank you for using " + programName + ". ");
        System.out.println("\n\n\n");
    }
    public void formatOutput(int[] height1, int timeIn)
	{
	    char zeroChar = '|'; 
		if (decideSymbols(height1, timeIn).charAt(0) == '-')
		{
			zeroChar = '-';
		}
		else if (decideSymbols(height1, timeIn).charAt(0) == '+')
		{
			zeroChar = '+';
		}
		else 
		{
			//nothing because (decideSymbols(timeIn).charAt(0) = 'o')
		}
		String before = ""; 
		String after = "";
		if (zeroChar == '-')
		    before = decideSymbols(height1, timeIn);
		else if (zeroChar == '+')
		    after = decideSymbols(height1, timeIn);
		
		System.out.printf("%-5s%6s%1s%s\n", ("t" + (timeIn-1)), before, zeroChar, after); 
	}
	public String decideSymbols(int[] height1, int timeIn)
	{
    	String returnString = "";
    	char type;
    	if (timeIn == 1)
    	    type = 'o';
    	else
    	{
			//comparing, don't need to add 5 here 
        	if(height1[timeIn] > height1[(timeIn - 1)]) //increase as time increases
        	    type = '+';
        	else if(height1[timeIn] < height1[(timeIn - 1)]) //decrease as time increases
        	    type = '-';
        	else //no change 
        	    type = 'o';
    	}
    	
    	//building the symbol string; if negative, gets absolute value 
    	for(int i = 0; i < (Math.abs(height1[timeIn])); i++)
    	{
    	    returnString = returnString + type;
    	}
    	return returnString;
	}
	public void printSymbols(int[] height1, int timeIn)
	{
		System.out.printf("%-5s " + decideSymbols(height1, timeIn) + "\n", ("t" + (timeIn-1))); 
		    //prints time index - 1 (to symbolize initial state), the symbols, and the new line. 
	}
	//extra credit section 
	public int[] getUserArray()
	{
	    System.out.println("Now it's your turn. Please enter your heights " + 
			"in order from initial height to ending height.");
		int userNextHeight;
		int[] userHeight = new int[Integer.parseInt(getInput("Please enter the total number " + 
		    "of time periods you want to track", "int"))];
		for (int i = 0; i < userHeight.length; i++)
		{
			userHeight[i] = Integer.parseInt(getInput("Please enter the next height of your plant.", "int")); 
		}
		return userHeight;
	}
	
	
	public void printRate(int[] height1)
	{
		//System.out.println((height1[(height1.length-1)] + 5) + " " + height1[0] + " " + (height1.length-1));
		System.out.printf("The average rate of change is about %.2f units/measurement of time. \n", 
			(((double)(height1[(height1.length-1)]) - height1[0]) / (height1.length-1)));
		    //last item - first item divided by length minus one (because of initial height)
	}
	
	
	
	
	
	
	
	
	
	
    public boolean userPlaying()
    {
        boolean userPlay;
        String userDecision = getInput("Would you like to run again? [Yes/No]", "next");
        if (userDecision.equalsIgnoreCase("Yes"))
            userPlay = true;
        else if (userDecision.equalsIgnoreCase("No"))
            userPlay = false;
        else //user did not input yes or no 
        {
            System.out.println("Please enter either \"Yes\" or \"No\".\n");
            userPlay = userPlaying();
                //call userPlaying again 
        }
        return userPlay;
    }
    public String getInput(String promptIn, String get)
    {
        Scanner keyboard = new Scanner(System.in);
        System.out.print(promptIn + "\n\t-->\t"); //print the prompt passed in 
        if (get.equalsIgnoreCase("line"))
            return keyboard.nextLine();
        else if (get.equalsIgnoreCase("word")||get.equalsIgnoreCase("next"))
            return keyboard.next();
        else if (get.equalsIgnoreCase("int"))
        {
			if (onlyHas(get, "int"))
				return ("" + keyboard.nextInt());
					//will have to Integer.parseInt(getInput("prompt", "int")) to return integer 
            else 
            {
				System.out.println("Error: Received other data type when " + 
					"expected int (Your number will be stored as \'0\').");
				return ("" + 0);
					//will still have to parse int
			}
        }
        else if (get.equalsIgnoreCase("double"))
        {
			if (onlyHas(get, "double"))
				return ("" + keyboard.nextDouble());
					//will have to Double.parseDouble(getInput("prompt", "int")) to return double 
            else 
            {
				System.out.println("Error: Received other data type when " + 
					"expected double (Your number will be stored as \'0.0\').");
				return ("" + 0);
					//will still have to parse double
			}
        }
        else 
        {
            System.out.println("Internal error: getInput method; unrecognized get parameter");
            return null;
        }
    }
    public boolean onlyHas(String getIn, String intOrDouble)
    {
		if (intOrDouble.equalsIgnoreCase("int") || intOrDouble.equalsIgnoreCase("double"))
		{
			for (int i = 0; i < (getIn.length() - 1); i++)
			{
				if ((int)(getIn.charAt(i)) >= 49 && (int)(getIn.charAt(i)) <= 1)
				{
					//if within ascii range of numbers, continue with the program
				}
				else if (((int)(getIn.charAt(i)) == 46) && intOrDouble.equalsIgnoreCase("double"))
				{
					//continue with the program but ONLY if it's in double 
				}
				else
					return false; //no longer purely numbers 
			}
			return true; //it made it out without returning false 
		}
		else
		{
			System.out.println("Internal error: onlyHas method; unrecognized intOrDouble parameter (returned false)");
			return false;
		}
	}
}



//GradeStats.java
/* Noah Guan
 * 01-15-2025
 * Per. 6 Java w/ Mr. Yu
 * GradeStats.java
 * Program #38
 * Pseudocode: 


main 
    d&i new instance of gradestats 
    instance.calculateIt 


calculateIt //essentially the run method (diff.name)
    if function.equalsIgnoreCase(run)
        print 3 lines 
    	do 
    		print welcome (header and intro) 
    		<call printInfo (<call calculateIt("", <call getScores>)>)>
    	while (<call> util method(userPlaying, "", ""))
    	print 3 lines
    else if function.equalsIgnoreCase(getInfo)
String[] getInfo ()
    calculateIt("getInput", "", "", "Please enter the score.\t-->", "int")
    for int i = 0; i < 
    

String[] calcScoresUnder75Perc (int[] scoresIn) //returns a list of all scores under 75 percent 
    //shorten and combine these 2 arrays later in a return String array
    int[] under75 = int[scoresIn.length];
    int[] indexNumFoundAt = int[scoresIn.length];
    //initialize the under75 int values to 0
    int i = 0; //reusable index var 
    int u75i = 0; //under75Index
    while(i < scoresIn.length)
    {
        
        if scoresIn[i] < 75 
        {
            //initialize under75 to the score + 1 then increment (go to the next one)
            under75[u75i] = scoresIn[i] + 1;
            indexNumFoundAt[u75i] = i;
            u75i++;
        }
        i++;
    }
    
    //print user data 
    for (int i = 0; i < scoresIn.length;)
        print(Here is the data you entered: Student #i's score: scoresIn[i]-1)
    
    //find actual length of under75 array by removing all units in array that are still 0 
    int realLength = 0;
    for(i = 0; i < under75.length; i++)
    {
        (under75[i])--;
        //System.out.println(under75[i]);
        if (under75[i] >= 0)
        {
            realLength++; 
        }
    }
    String[] rSA = String[realLength];
        //returnStringArray; d&i rSA (returnStringArray) to actual length to remove extra spaces 
        //initialize rSA to that score and the index number found at separated by a space
    for (u75i = 0; u75i < scoresIn.length; u75i++)
    {
        if (u75[i]-1 < 0)
        rSA[u75i] = "" + under75[u75i] + " " + i;
    }
    return rSA; //return the number and the index found at 


max(int[] scores, int iNI) //iNI=indexNumIn, assumes second number is the next indexNum 
    if(iNI == scores.length-1)
        return Math.max(firstScore, secondScore); //the max num of index and num after index 


int[] min(int[] remScoresIn, iNI, nextSmall) // better name = getLeastValue(), return the least value and the index found at input = remaining scores needed sorting
    int i = 0; here our friend is again 
    int least; //first num returned 
    int foundAt; 
    
    while(i < remScoresIn.length) //needs to run through whole array to get least value 
        if(i == scores.length-1)
            least = nextSmall;
        else 
            least = Math.min(nextSmall, remScoresIn[fINI]); //the min of them 
            foundAt = iNI; 
        //compare nextSmall to the next num; if the next num is smaller, store the next number in remSmall and store the index in foundAt. 
        //initialize number being swapped out to swapNum, initialize next smallest num to the next place 
        i++;
    return (int[] {least, foundAt})
        //note: boolean-like system, where (int)true = 1and (int)false = 0.
double avg (int[] finalScores)
    int totalNum = 0;
    for (int i = 0; i < finalScores.length; i++)
    {
        totalNum += finalScores[i];
    }
    return ((double)(totalNum/scores.length))
orderNums
    int i = 0; //index again 
    int nextSmall; //the next (remaining) smallest number left 
    int foundAt; //smallest num found at index __ 
    int swapNum; //holder for remaining num 
    int[] holdMin; //transfer variable
    //if scores[i] = 0
    while (scores is unsorted) //outer 
        holdMin = min(1)
        scores[i] = min(i)
        
    
median(int[] finalScores)
    if (finalScores.length%2=0)
        return (finalScores[scores.length/2-1]+scores[scores.length/2])/2; //take the middle 2 nums and divide by 2 
    else //odd 
        return (finalScores[scores.length/2]); //take the middle num


Sample run.		User input in bold.
< prompt info – make it clear! >
Type in	the	score.		Type	“Quit”	to	end	the	program	-->		95
Type in	the	score.		Type	“Quit”	to	end	the	program	-->		65
Type in	the	score.		Type	“Quit”	to	end	the	program	-->		70
Type in	the	score.		Type	“Quit”	to	end	the	program	-->		78
Type in	the	score.		Type	“Quit”	to	end	the	program	-->		85
Type in	the	score.		Type	“Quit”	to	end	the	program	-->		77
Type in	the	score.		Type	“Quit”	to	end	the	program	-->		QuiT
Here is the data you entered:
Student 1’s score:       95
Student 2’s score:       65
Student 3’s score:       70
Student 4’s score:       78
Student 5’s score:       85
Student 6’s score:       77
There were 2 students who scored below 75%: student 2, student 3.
Number of scores: 6
Minimum: 65
Maximum: 95
Average: 78.3
Median: 77.5

*/
import java.util.Scanner;
public class GrowthPatternExtraCredit 
{
    private int[] height;
    public GrowthPatternExtraCredit()
    {
        height = new int[] {-1, -3, 1, 2, 3, 4, 3, 4, 4, 6, 8, 6, 6, 7, 10};
    }
    public static void main(String args[]) 
    {
        GrowthPatternExtraCredit gpec = new GrowthPatternExtraCredit();
        gpec.growIt("GrowthPatternExtraCredit", "monitors the growth of a plant over time. ");
    }
    public void growIt(String programName, String programDescription)
    {
        System.out.println("\n\n\n");
        //declare variables outside of while loop 
        int[] height1 = height; 
            //declaring the first instance variable to field variable 
        int runNum = 0; 
            //we will increment this every time we run the main part of the program 
        String toPrint = "";
            //d&i toPrint
		do
        {
            System.out.println("\nWelcome to " + programName + 
                ". \nThis program " + programDescription);
                //header and intro section 
            runNum++; //for the number of times run 
            //call the real meat of the program method 
            int innerRunNum = 0; //(same logic)
            do
            {
                innerRunNum++;
                //change toPrint based 
                if (innerRunNum == 1)
                {
                    toPrint = "\nExample: ";
                }
                else //user interactive stage starts
                {
                    //to initialize toPrint 
                    if (innerRunNum == 2)
                        toPrint = "Now it's your turn.";
                    else //innerRunNum > 2
                    {
                        toPrint = ""; //don't have to prompt them by now, they should know 
					}
                }
                int[] heightArray = getUserArray(toPrint, height1);
                    //uses method to decide heightArray 
                for (int time = 1; time < heightArray.length; time++)
            	{
            		formatOutput(heightArray, time);
						//instead of printSymbols(heightArray, time);
            	}
            	printRate(heightArray);
            } while(getInput("Would you like to run again? (if you format your answer incorrectly, the program will terminate.) [Y/N]", "next").equalsIgnoreCase("Y"));
                //checks if the user would like to run again 
            runNum++;
        	System.out.println();//separate one from the next 
        } while(userPlaying());
        System.out.println("Thank you for using " + programName + ". ");
        System.out.println("\n\n\n");
    }
    //extra credit section
	public int[] getUserArray(String toPrintIn, int[] height1In)
	{
	    System.out.println(toPrintIn);
	    if (toPrintIn.charAt(0) == '\n')
	        return height1In;
	    else  //(toPrint.charAt(0) == 'N') and all else
	    {
    	    System.out.println("Now it's your turn. Please enter your heights " + 
    			"in order from initial height to ending height.");
    		int userNextHeight;
    		int[] userHeight = new int[Integer.parseInt(getInput("Please enter the total number " + 
    		    "of time periods you want to track", "int"))];
    		for (int i = 0; i < userHeight.length; i++)
    		{
    			userHeight[i] = Integer.parseInt(getInput("Please enter the next height of your plant.", "int")); 
    		}
    		return userHeight;
	    }
	}
    public void formatOutput(int[] height1, int timeIn)
	{
	    char zeroChar = '|'; 
		if (decideSymbols(height1, timeIn).charAt(0) == '-')
		{
			zeroChar = '-';
		}
		else if (decideSymbols(height1, timeIn).charAt(0) == '+')
		{
			zeroChar = '+';
		}
		else 
		{
			//nothing because (decideSymbols(timeIn).charAt(0) = 'o')
		}
		String before = ""; 
		String after = "";
		if (zeroChar == '-')
		    before = decideSymbols(height1, timeIn);
		else if (zeroChar == '+')
		    after = decideSymbols(height1, timeIn);
		
		System.out.printf("%-5s%6s%1s%s\n", ("t" + (timeIn-1)), before, zeroChar, after); 
	}
	public String decideSymbols(int[] height1, int timeIn)
	{
    	String returnString = "";
    	char type;
    	if (timeIn == 1)
    	    type = 'o';
    	else
    	{
			//comparing, don't need to add 5 here 
        	if(height1[timeIn] > height1[(timeIn - 1)]) //increase as time increases
        	    type = '+';
        	else if(height1[timeIn] < height1[(timeIn - 1)]) //decrease as time increases
        	    type = '-';
        	else //no change 
        	    type = 'o';
    	}
    	
    	//building the symbol string; if negative, gets absolute value 
    	for(int i = 0; i < (Math.abs(height1[timeIn])); i++)
    	{
    	    returnString = returnString + type;
    	}
    	return returnString;
	}
	public void printSymbols(int[] height1, int timeIn)
	{
		System.out.printf("%-5s " + decideSymbols(height1, timeIn) + "\n", ("t" + (timeIn-1))); 
		    //prints time index - 1 (to symbolize initial state), the symbols, and the new line. 
	}
	
	public void printRate(int[] height1)
	{
		//System.out.println((height1[(height1.length-1)] + 5) + " " + height1[0] + " " + (height1.length-1));
		System.out.printf("The average rate of change is about %.2f units/measurement of time. \n", 
			(((double)(height1[(height1.length-1)]) - height1[0]) / (height1.length-1)));
		    //last item - first item divided by length minus one (because of initial height)
	}
	
	
	
	
	
	
	
	
	
	
    public boolean userPlaying()
    {
        boolean userPlay;
        String userDecision = getInput("Would you like to run again? [Yes/No]", "next");
        if (userDecision.equalsIgnoreCase("Yes"))
            userPlay = true;
        else if (userDecision.equalsIgnoreCase("No"))
            userPlay = false;
        else //user did not input yes or no 
        {
            System.out.println("Please enter either \"Yes\" or \"No\".\n");
            userPlay = userPlaying();
                //call userPlaying again 
        }
        return userPlay;
    }
    public String getInput(String promptIn, String get)
    {
        Scanner keyboard = new Scanner(System.in);
        System.out.print(promptIn + "\n\t-->\t"); //print the prompt passed in 
        if (get.equalsIgnoreCase("line"))
            return keyboard.nextLine();
        else if (get.equalsIgnoreCase("word")||get.equalsIgnoreCase("next"))
            return keyboard.next();
        else if (get.equalsIgnoreCase("int"))
        {
			if (onlyHas(get, "int"))
				return ("" + keyboard.nextInt());
					//will have to Integer.parseInt(getInput("prompt", "int")) to return integer 
            else 
            {
				System.out.println("Error: Received other data type when " + 
					"expected int (Your number will be stored as \'0\').");
				return ("" + 0);
					//will still have to parse int
			}
        }
        else if (get.equalsIgnoreCase("double"))
        {
			if (onlyHas(get, "double"))
				return ("" + keyboard.nextDouble());
					//will have to Double.parseDouble(getInput("prompt", "int")) to return double 
            else 
            {
				System.out.println("Error: Received other data type when " + 
					"expected double (Your number will be stored as \'0.0\').");
				return ("" + 0);
					//will still have to parse double
			}
        }
        else 
        {
            System.out.println("Internal error: getInput method; unrecognized get parameter");
            return null;
        }
    }
    public boolean onlyHas(String getIn, String intOrDouble)
    {
		if (intOrDouble.equalsIgnoreCase("int") || intOrDouble.equalsIgnoreCase("double"))
		{
			for (int i = 0; i < (getIn.length() - 1); i++)
			{
				if ((int)(getIn.charAt(i)) >= 49 && (int)(getIn.charAt(i)) <= 1)
				{
					//if within ascii range of numbers, continue with the program
				}
				else if (((int)(getIn.charAt(i)) == 46) && intOrDouble.equalsIgnoreCase("double"))
				{
					//continue with the program but ONLY if it's in double 
				}
				else
					return false; //no longer purely numbers 
			}
			return true; //it made it out without returning false 
		}
		else
		{
			System.out.println("Internal error: onlyHas method; unrecognized intOrDouble parameter (returned false)");
			return false;
		}
	}
}
