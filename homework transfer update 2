//Hailstone.java
/* Noah Guan
 * 11-06-2024
 * Per. 6 Java w/ Mr. Yu
 * Hailstone.java
 * Program #28 
 * Pseudocode: 
import scanner 
class header 
	D&I int field variable hailstoneNum, count
	constructor 
		hailstoneNum = 0; 
		count = 0;
	main header 
		create an instance of hailstone
		call findIt method 
	findIt header 
		loop to call other methods 
			sentinel value: -1 
		System.out.println("Thank you for playing Hailstone. ");
	getInput header 
		prompt user for int hailstone number
			//Enter a positive integer ( 1 - 10000 ). To quit, enter -1:\t
		reinitialize field variable to user input 
	calculateHailstone
		if hailstoneNum <= 0 or hailstoneNum > 10000;
			System.out.println("Enter a value within the range, please!");
		else 
		{
			do
			{
				printSequence(hailstoneNum)
				if hailstoneNum % 2 = 0 
					hailstoneNum = hailstoneNum/2;
				else 
					hailstoneNum = 3*hailstoneNum + 1;
				count++
			}while (hailstoneNum != -1);	
		}
	printSequence header
		System.out.println("\n\t" + hailstoneNum); 
	printCount header 
		System.out.println("The loop executed " + count + " times. ");
		
			
 * Testing Plan: 
1. Input: -8
	Output: "Enter a value within the range, please!" 
2. Input: 1 
3. Input: 0
4. Input: 77031

5. Input: 0.5
    Output: error 
    Exception in thread "main" java.util.InputMismatchException
	at java.base/java.util.Scanner.throwFor(Scanner.java:947)
	at java.base/java.util.Scanner.next(Scanner.java:1602)
	at java.base/java.util.Scanner.nextInt(Scanner.java:2267)
	at java.base/java.util.Scanner.nextInt(Scanner.java:2221)
	at Main.getInput(Main.java:108)
	at Main.findIt(Main.java:88)
	at Main.main(Main.java:72)
6. Input: 
 * 
*/
import java.util.Scanner;
public class Main
{
	private int userIn, hailstoneNum, count; //declaring all field variables 
	private boolean done;
	public Main() //initializing all field variables 
	{
	    userIn = 0;
		hailstoneNum = 0; //hailstone number being run 
		count = 0; //the number of times the loop runs 
		done = false; //called to stop the loop if the user inputs -1 
		    //+ it's for the general while loop to run all the code in findIt() 
	}
	public static void main(String[] args)
	{
		Main h = new Main();
		h.findIt();
	}
	public void findIt()
	{
		System.out.println("\n\n\n"); //required 3 lines 
		while (done == false)
			//loop to call other methods 
		{
			//reinitializes everything so it doesn't run off of the previous
			//values if the player decides to play more than once 
			userIn = 0;
			hailstoneNum = 0;
			count = 0;
			//while loop for getInput to ensure user input is within range
			while ((userIn <= 0) || (userIn > 10000))
			{
			    getInput();
			}
			//calls calculateHailstone and printCount if hailstoneNum is not
			//negative one or 
			calculateHailstone();
			printCount();
				//sentinel value: -1 
		}
		System.out.println("Thank you for playing Hailstone.");
			//exit message 
		System.out.println("\n\n\n"); //required 3 lines 
	}
	public void getInput() //this method simply gathers input from the user 
	    //into the field variable userInput  
	{
		Scanner keyboard = new Scanner(System.in);
		System.out.print("Enter a positive integer ( 1 - 10000 )." + 
			" To quit, enter -1:\t");
		userIn = keyboard.nextInt();
	    if (userIn == -1) //checks if user input is -1, if it is, 
		    //then sets value done to true, enforcing sentinel value for 
		    //while loop in findIt that enforces 
		{
		    done = true;
		}
        else if (userIn <= 0 || hailstoneNum > 10000) //specifies user range
        {
            System.out.println("\nEnter a value within the range, please!" 
                + "\n");
        }
	    else 
		    hailstoneNum = userIn; 
			//reinitialize field variable to user input for future calculations
	}
	public void calculateHailstone() //the heavylifting calculations: this 
	    //method only runs if hailstoneNum is not -1, if it is, then the 
	    //method is essentially skipped. 
	{
		//at this point, the value is within bounds 
		if (hailstoneNum == 1)
		    //takes care of edge case '1', where 
		{
			System.out.println("The loop executed 0 times as '1' is " 
				+ "the value we want to run this sequence to; it will " 
				+ "continue forever if we do not stop it. ");
		}
	    //while(hailstoneNum != 1)
	    do
	        //this needs a do-while loop or else the program hangs 
	        //honestly, after 4.5 hours of trying to figure out what 
	        //happened I decided it wasn't worth my time anymore 
		{
			printSequence();
			if (hailstoneNum % 2 == 0) 
				hailstoneNum = hailstoneNum/2;
				    //if the hailstone number is even, we divide it by 2 
			else 
				hailstoneNum = 3*hailstoneNum + 1;
				    //if the hailstone number is odd, we multiply it by 3 
				    //and add one 
			count++;
			    //add 1 to the count 
		} while(hailstoneNum != 1);
		//System.out.println("\t1");
		//count++;
	}
	public void printSequence()//simply prints out every hailstone number inputted -- kind of a useless method 
	{
		System.out.printf("\t%,d", hailstoneNum); 
	}
	public void printCount() //simply prints out the count number after all
	    //calculations -- again, kind of useless 
	{
		System.out.println("\n" + "The loop executed " + count 
				+ " times. \n\n");
	}
}

